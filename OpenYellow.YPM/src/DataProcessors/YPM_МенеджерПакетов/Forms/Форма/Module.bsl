//@skip-check use-non-recommended-method

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
          
    ОтборПоТипу  = 1;
    
    ПрименитьПользовательскиеНастройки();    
    
    СписокФайлов.Параметры.УстановитьЗначениеПараметра("Автор"      , "");
    СписокФайлов.Параметры.УстановитьЗначениеПараметра("Репозиторий", "");
    СписокФайлов.Параметры.УстановитьЗначениеПараметра("ОтборПоТипу", ОтборПоТипу);
    СписокПакетов.Параметры.УстановитьЗначениеПараметра("ОтборПоТипу", ОтборПоТипу); 
    
    YPM_Основные.ОбновитьСписокУстановленныхРасширений();
    
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
    
    ОформитьРазделОПроекте();
    
    Если ОбновлятьПриЗапуске Тогда
        
        ОбновитьИндексНаСервере();
        ПодключитьОбработчикОжидания("ПроверитьВыполнениеФоновогоЗадания", 2);
                    
    КонецЕсли;
    
    СписокПакетовПриАктивизацииСтроки(Неопределено);
    ОтборПоТипуПриИзменении(Неопределено);
    
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборПоТипуПриИзменении(Элемент)
    
    СписокПакетов.Параметры.УстановитьЗначениеПараметра("ОтборПоТипу", ОтборПоТипу);
    СписокФайлов.Параметры.УстановитьЗначениеПараметра("ОтборПоТипу", ОтборПоТипу);
    
	Если ОтборПоТипу = 1 Тогда           
		
        Элементы.СписокПакетов.КартинкаСтрок = БиблиотекаКартинок.Обработка; 
    	СкрытьПоказатьКнопкиОбработок(Истина);
		
	ИначеЕсли ОтборПоТипу = 2 Тогда            
		
        Элементы.СписокПакетов.КартинкаСтрок = БиблиотекаКартинок.Отчет; 
		СкрытьПоказатьКнопкиОбработок(Истина);
		
	Иначе     
		
        Элементы.СписокПакетов.КартинкаСтрок = БиблиотекаКартинок.ОформлениеКвадратыЗаполненныеТри; 
		СкрытьПоказатьКнопкиОбработок(Ложь);
		
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ОбновлятьПриЗапускеПриИзменении(Элемент)
    ОбновлятьПриЗапускеПриИзмененииНаСервере(ОбновлятьПриЗапуске);
КонецПроцедуры

&НаКлиенте
Процедура СписокПакетовСтраницаРепозиторияНажатие(Элемент, СтандартнаяОбработка)
    
    СтандартнаяОбработка = Ложь;
    ТекущиеДанные = Элементы.СписокПакетов.ТекущиеДанные;
    
    Если Не ТекущиеДанные = Неопределено Тогда
        ООп = Новый ОписаниеОповещения();
        НачатьЗапускПриложения(ООп, ТекущиеДанные.СтраницаРепозитория);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияТелеграмНажатие(Элемент)
    ООп = Новый ОписаниеОповещения();
    НачатьЗапускПриложения(ООп, "https://t.me/OpenYellowProject");
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияГитхабНажатие(Элемент)
    ООп = Новый ОписаниеОповещения();
    НачатьЗапускПриложения(ООп, "https://github.com/OpenBSL/YellowPM");
КонецПроцедуры

&НаКлиенте
Процедура СписокПакетовСтраницаАвтораНажатие(Элемент, СтандартнаяОбработка)
    
    СтандартнаяОбработка = Ложь;
    ТекущиеДанные = Элементы.СписокПакетов.ТекущиеДанные;
    
    Если Не ТекущиеДанные = Неопределено Тогда
        ООп = Новый ОписаниеОповещения();
        НачатьЗапускПриложения(ООп, ТекущиеДанные.СтраницаАвтора);
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГруппаРепозиторийПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ТекущиеДанные = Элементы.СписокПакетов.ТекущиеДанные;
    
	Если ТекущиеДанные <> Неопределено 
		И ТекущаяСтраница.Имя = "ГруппаСтраницаРепозитория" Тогда

		СтраницаРепозитория = ТекущиеДанные.СтраницаРепозитория;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокПакетов

&НаКлиенте
Процедура СписокПакетовПриАктивизацииСтроки(Элемент)
    
    ОбновитьДанныеПриНеобходимости();
    
    ТекущиеДанные = Элементы.СписокПакетов.ТекущиеДанные;
    
    Если ТекущиеДанные <> Неопределено Тогда
        
        СписокФайлов.Параметры.УстановитьЗначениеПараметра("Автор", ТекущиеДанные.Автор);
        СписокФайлов.Параметры.УстановитьЗначениеПараметра("Репозиторий", ТекущиеДанные.Репозиторий); 
		
		Если Элементы.ГруппаРепозиторий.ТекущаяСтраница.Имя = "ГруппаСтраницаРепозитория" Тогда
			СтраницаРепозитория = ТекущиеДанные.СтраницаРепозитория;	
		КонецЕсли;
		
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СохранитьАдресИндекса(Команда)
    СохранитьАдресИндексаНаСервере(АдресаИндексов.ВыгрузитьЗначения());
КонецПроцедуры

&НаКлиенте
Процедура АдресИндексаПоУмолчанию(Команда)
    АдресаИндексов.Очистить();
    АдресаИндексов.Добавить("https://openyellow.org/data/ypm_index/index.json");
    СохранитьАдресИндексаНаСервере(АдресаИндексов);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИндекс(Команда)
    
    ОбновитьИндексНаСервере();
    ПодключитьОбработчикОжидания("ПроверитьВыполнениеФоновогоЗадания", 1);
      
КонецПроцедуры

&НаКлиенте
Процедура Скачать(Команда)
    
    ТекущиеДанные = Элементы.СписокФайлов.ТекущиеДанные;
    
    Если Не ТекущиеДанные = Неопределено Тогда
        
        ООп    = Новый ОписаниеОповещения("ПослеВыбораПути", ЭтотОбъект, ТекущиеДанные.АдресФайла);
        Режим  = РежимДиалогаВыбораФайла.Сохранение;                   
        Диалог = Новый ДиалогВыбораФайла(Режим);
        Диалог.ПолноеИмяФайла = ТекущиеДанные.Файл;
        Диалог.МножественныйВыбор = Ложь;
        Диалог.Показать(ООп);
        
    КонецЕсли;
          
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВДополнительныеОбработки(Команда)
    
    #Если ВебКлиент Тогда
    	Сообщить("Получение файлов недоступно в веб-клиенте!");
    #КонецЕсли
    
    #Если Не ВебКлиент Тогда
    	
    Попытка
		
		ТекущиеДанные = Элементы.СписокФайлов.ТекущиеДанные;
		
		Если Не ТекущиеДанные = Неопределено Тогда 
			
			ИмяФормыОткрытия  = "Справочник.ДополнительныеОтчетыИОбработки.Форма.ФормаЭлемента";
			ФормаДопОбработок = ПолучитьФорму(ИмяФормыОткрытия);
			ФормаДопОбработок.ПоказатьДиалогЗагрузкиИзФайлаПриОткрытии = Ложь;
			
			Двоичные = YPM_ИнструментыКлиентСервер.Get(ТекущиеДанные.АдресФайла);
			Адрес    = ПоместитьВоВременноеХранилище(Двоичные, ФормаДопОбработок.УникальныйИдентификатор);
			
			ОписаниеФайла        = Новый Структура("Имя,Хранение", ТекущиеДанные.Файл, Адрес);
			ПараметрыРегистрации = Новый Структура("АдресДанныхОбработки,Успех", "", Ложь);
			   
	        ФормаДопОбработок.Открыть();
	        ФормаДопОбработок.ОбновитьИзФайлаПослеВыбораФайла(ОписаниеФайла, ПараметрыРегистрации);
			
		КонецЕсли;
        
    Исключение
        
        Сообщить("Ошибка работы со справочником доп. обработок: " + ОписаниеОшибки());
    КонецПопытки;
    
    #КонецЕсли
    
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	ОткрытьВнешнийФайл(Истина);	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлНебезопасно(Команда)
	ОткрытьВнешнийФайл(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРасширение(Команда)
    
    #Если ВебКлиент Тогда
    	Сообщить("Получение файлов недоступно в веб-клиенте!");
    #КонецЕсли
    
    #Если Не ВебКлиент Тогда
    	
    Попытка
        
        НужноОбновлениеСписка = Истина;
        
		ТДФ = Элементы.СписокФайлов.ТекущиеДанные;
        ТДР = Элементы.СписокПакетов.ТекущиеДанные;
		
		Если Не ТДФ = Неопределено Тогда 
			 
            СтруктураЗаписи = Новый Структура;
            СтруктураЗаписи.Вставить("Репозиторий", ТДР.Репозиторий);
            СтруктураЗаписи.Вставить("Автор"      , ТДР.Автор);
            СтруктураЗаписи.Вставить("Файл"       , ТДФ.Файл);
            СтруктураЗаписи.Вставить("Версия"     , ТДФ.Версия);
			
			ИзмененыМетаданные = УстановитьРасширениеНаСервере(ТДФ.АдресФайла, ТДР.UUID, СтруктураЗаписи);
			
			Если ИзмененыМетаданные Тогда
                
                ВывестиЗапросПерезапуска();
				
            Иначе
                                        
            	Элементы.СписокПакетов.Обновить();
            	Элементы.СписокФайлов.Обновить();
                
            	Сообщить("Установка завершена!");
				
			КонецЕсли;
            
		КонецЕсли;
        
    Исключение
        
        Сообщить("Ошибка добавления расширения: " + ОписаниеОшибки());
    КонецПопытки;
    
    #КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура УдалитьРасширение(Команда)
    
    ТДФ = Элементы.СписокФайлов.ТекущиеДанные;
    
    Если ТДФ = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    СообщениеУдаления = УдалитьРасширениеНаСервере(ТДФ.UUID);
    
    Если ЗначениеЗаполнено(СообщениеУдаления) Тогда
                
        Сообщить(СообщениеУдаления);
        
        Элементы.СписокПакетов.Обновить();
        Элементы.СписокФайлов.Обновить();
        
    Иначе
        ВывестиЗапросПерезапуска();
    КонецЕсли;
              
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьРасширениеКакУстановленное(Команда)
    
    ООп = Новый ОписаниеОповещения("ПослеВводаИмениРасширения", ЭтотОбъект);
    ПоказатьВводСтроки(ООп, , "Имя расширения из списка расширений конфигурации", , Ложь);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Процедура СохранитьАдресИндексаНаСервере(Знач АдресИндекса)
    
    КлючОбъекта  = "YPM2";
    КлючНастроек = "АдресИндекса";

    ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, КлючНастроек, АдресИндекса);
    
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновлятьПриЗапускеПриИзмененииНаСервере(Знач Значение)
    ХранилищеОбщихНастроек.Сохранить("YPM2", "ОбновлятьПриЗапуске", Значение);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодключитьВнешнююОбработкуНаСервере(Знач Адрес, Знач Тип, Знач БезопасныйРежим)

	Двоичные = YPM_ИнструментыКлиентСервер.Get(Адрес);
	Адрес    = ПоместитьВоВременноеХранилище(Двоичные);
	
	Если Тип = 1 Тогда  
		
		ВнешняяОбработка = ВнешниеОбработки.Подключить(Адрес, , БезопасныйРежим);
		ИмяФормы         = "ВнешняяОбработка." + ВнешняяОбработка; 	
		
	ИначеЕсли Тип = 2 Тогда  
		
		ВнешнийОтчет = ВнешниеОтчеты.Подключить(Адрес, , БезопасныйРежим);
		ИмяФормы     = "ВнешнийОтчет." + ВнешнийОтчет; 
		
	Иначе
		Сообщить("Файл не является отчетом или обработкой"); 
		Возврат "";
	КонецЕсли;

	ИмяФормы = ИмяФормы + ".Форма";
	
	Возврат ИмяФормы;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьУстановку(Знач СтруктураЗаписи)
    
    МЗУ = РегистрыСведений.YPM_УстановленныеРешения.СоздатьМенеджерЗаписи();
    ЗаполнитьЗначенияСвойств(МЗУ, СтруктураЗаписи);
    МЗУ.Записать(Истина);
    
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьДанныеСервер()
    
    YPM_Основные.ОбновитьСписокУстановленныхРасширений();
    
КонецПроцедуры

&НаСервереБезКонтекста
Функция УдалитьРасширениеНаСервере(Знач UUID)
    
    СообщениеУдаления  = "Расширение для удаления не найдено! Возможно, оно уже было удалено";
    ИзменяетМетаданные = Ложь;
    
    Если ЗначениеЗаполнено(UUID) Тогда
        
        Попытка
            
            ОтборРасширения     = Новый Структура("УникальныйИдентификатор", Новый УникальныйИдентификатор(UUID));
            УдаляемоеРасширение = РасширенияКонфигурации.Получить(ОтборРасширения);
            
            Если УдаляемоеРасширение.Количество() <> 0 Тогда
                
                УдаляемоеРасширение = УдаляемоеРасширение[0];                                
                УдаляемоеРасширение.Удалить();
                
                ИзменяетМетаданные = Не YPM_Основные.ПроверитьРаботоспособностьПолученияДанных(); 
                СообщениеУдаления  = "Обработка завершена!";
                
            КонецЕсли;
            
        Исключение
            СообщениеУдаления = "Не удалось удалить расширение: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
        КонецПопытки;
        
    КонецЕсли;
    
    Если ИзменяетМетаданные Тогда
        Возврат Неопределено;
    Иначе
        YPM_Основные.ОбновитьСписокУстановленныхРасширений();
        Возврат СообщениеУдаления;
    КонецЕсли;

КонецФункции

&НаСервереБезКонтекста
Функция ОтметитьРасширениеНаСервере(СтруктураЗаписи, Результат)
    
    ОтборРасширения = Новый Структура("Имя", СокрЛП(Результат));
    ОтмеченноеРасширение = РасширенияКонфигурации.Получить(ОтборРасширения);
    
    Если ОтмеченноеРасширение.Количество() = 0 Тогда
        Возврат "Установленное расширение с указанным именем не найдено!";
    Иначе
        ОтмеченноеРасширение = Строка(ОтмеченноеРасширение[0].УникальныйИдентификатор);
    КонецЕсли;
    
    СтруктураЗаписи.Вставить("UUID", ОтмеченноеРасширение);
    
    ЗаписатьУстановку(СтруктураЗаписи);
      
    Возврат "Расширение отмечено как установленное";
    
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДатуСервера()
    Возврат ТекущаяДатаСеанса();    
КонецФункции

&НаСервере
Процедура ОбновитьИндексНаСервере()
    
    НачалоОбновления = ТекущаяДатаСеанса();
    КлючХранилища    = ПоместитьВоВременноеХранилище("", УникальныйИдентификатор);
    
    Элементы.ГруппаЛево.Видимость       = Ложь;
    Элементы.ГруппаПраво.Видимость      = Ложь;
    Элементы.ГруппаЗагрузка.Видимость   = Истина;
    Элементы.ГруппаСтраницы.Доступность = Ложь;
    
    Адреса = АдресаИндексов.ВыгрузитьЗначения();
       
    МассивПараметров = Новый Массив;
    МассивПараметров.Добавить(Адреса);
    МассивПараметров.Добавить(КлючХранилища);
    
    ФЗД = ФоновыеЗадания.Выполнить("YPM_Основные.ОбновитьИндекс", МассивПараметров, УникальныйИдентификатор);
    
    ИДФоновогоЗадания = ФЗД.УникальныйИдентификатор;
    
КонецПроцедуры

&НаСервере
Процедура ЗаписатьЛогНаСервере(Знач Лог)
	Объект.ЛогОбновления = Лог;	
КонецПроцедуры

&НаСервере
Функция ПроверитьВыполнениеФоновогоЗаданияСервер() 
    
    Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИДФоновогоЗадания); 
    
    Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
        Возврат Ложь;
    Иначе
        Возврат Истина;
    КонецЕсли;
    
КонецФункции

&НаСервере
Процедура ПрименитьПользовательскиеНастройки()
    
    КлючОбъекта    = "YPM2";
    МассивИндексов = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, "АдресИндекса");
    Обновлять      = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, "ОбновлятьПриЗапуске");
    ТокенGithub    = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, "ТокенGithub");
    
    Если ЗначениеЗаполнено(МассивИндексов) И ТипЗнч(МассивИндексов) = Тип("Массив") Тогда
        
        АдресаИндексов.ЗагрузитьЗначения(МассивИндексов);
        
    Иначе
        
        АдресаИндексов.Добавить("https://openyellow.org/data/ypm_index/index.json");
        ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, "АдресИндекса", АдресаИндексов.ВыгрузитьЗначения());
        
    КонецЕсли;

    ОбновлятьПриЗапуске = ?(Обновлять = Неопределено, Истина, Обновлять);
    
КонецПроцедуры

&НаСервере
Функция УстановитьРасширениеНаСервере(Знач АдресФайла, Знач UUID, Знач СтруктураЗаписи)
    
    Двоичные = YPM_ИнструментыКлиентСервер.Get(АдресФайла);
	ЭтоНовое = Не ЗначениеЗаполнено(UUID);
	
	Если ЭтоНовое Тогда
		НовоеРасширение = РасширенияКонфигурации.Создать(); 
	Иначе
		НовоеРасширение = YPM_Основные.НайтиРасширениеПоUUID(UUID)
	КонецЕсли;
	
    YPM_Основные.ПроверитьПрименениеРасширения(Двоичные, НовоеРасширение);
    
    НовоеРасширение.БезопасныйРежим = Ложь;
    
    Если ЭтоНовое Тогда
        НовоеРасширение.Записать(ПолучитьОбщийМакет("YPM_РасширениеЗаглушка"));
        НовоеРасширение = YPM_Основные.НайтиРасширениеПоUUID(НовоеРасширение.УникальныйИдентификатор);
    КонецЕсли;
    
    СтруктураЗаписи.Вставить("UUID", НовоеРасширение.УникальныйИдентификатор);		
    ЗаписатьУстановку(СтруктураЗаписи);

    НовоеРасширение.Записать(Двоичные);
    
    ИзменяетСтруктуру = Не YPM_Основные.ПроверитьРаботоспособностьПолученияДанных();
    
    Возврат ИзменяетСтруктуру; 
    
КонецФункции

&НаКлиенте
Процедура ПослеВыбораПути(Результат, АдресФайла) Экспорт
	
    #Если ВебКлиент Тогда
    	Сообщить("Получение файлов недоступно в веб-клиенте!");
    #КонецЕсли
    
    #Если Не ВебКлиент Тогда
    	
	Попытка
		Если Не Результат = Неопределено Тогда
			
			YPM_ИнструментыКлиентСервер.Get(АдресФайла, Результат[0]);
			Сообщить("Файл успешно загружен");
			
		КонецЕсли;
		
	Исключение
		Сообщить("Ошибка при загрузке файла: " + ОписаниеОшибки());	
	КонецПопытки;
	
	#КонецЕсли
    
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВнешнийФайл(Знач БезопасныйРежим)

	Попытка
		
		ТекущиеДанные = Элементы.СписокФайлов.ТекущиеДанные;
		
		Если Не ТекущиеДанные = Неопределено Тогда 
			
			ИмяФормыОбработки = ПодключитьВнешнююОбработкуНаСервере(ТекущиеДанные.АдресФайла, ТекущиеДанные.Тип, БезопасныйРежим);
			
			Если Не ЗначениеЗаполнено(ИмяФормыОбработки) Тогда
				Возврат;
			КонецЕсли;
			
			ОткрытьФорму(ИмяФормыОбработки);
			
		КонецЕсли;
		
	Исключение
		
		Сообщить("Ошибка открытия обработки: " + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПоказатьКнопкиОбработок(Знач ВидимостьЭлемента)
	
	Элементы.ОткрытьФайл.Видимость                      = ВидимостьЭлемента;
	Элементы.ОткрытьФайлНебезопасно.Видимость           = ВидимостьЭлемента;
	Элементы.ДобавитьВДополнительныеОбработки.Видимость = ВидимостьЭлемента;
    
    Элементы.УстановитьРасширение.Видимость               = Не ВидимостьЭлемента;
    Элементы.УдалитьРасширение.Видимость                  = Не ВидимостьЭлемента;
    Элементы.ОтметитьРасширениеКакУстановленное.Видимость = Не ВидимостьЭлемента;
    Элементы.СписокПакетовТекущаяВерсия.Видимость         = Не ВидимостьЭлемента;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОбновления(Знач СтруктураВерсии)
    
    Если СтруктураВерсии["Обновление"] Тогда
        
       ООп = Новый ОписаниеОповещения("ПослеЗакрытияОбновления", ЭтотОбъект);
       ОткрытьФорму("Обработка.YPM_МенеджерПакетов.Форма.ФормаОбновления", СтруктураВерсии, , , , , ООп);
        
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ВывестиЗапросПерезапуска()
    
    ТекстВопроса = "Для продолжения работы требуется перезапуск, "
    + "так как расширение вызвало изменения в структуре метаданных "
    + Символы.ПС
    + Символы.ПС
    + "Перезапустить 1С сейчас?"
    + Символы.ПС;
    
    СписокКнопок = Новый СписокЗначений;
    СписокКнопок.Добавить("Перезапуск", "Перезапустить");
    СписокКнопок.Добавить("Закрытие"  , "Закрыть менеджер пакетов");
    
    ООп = Новый ОписаниеОповещения("ПослеЗапросаПерезапуска", ЭтотОбъект);
    ПоказатьВопрос(ООп, ТекстВопроса, СписокКнопок, , , "Требуется перезапуск");
    
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПриНеобходимости()
    
    Если НужноОбновлениеСписка Тогда
        
        ОбновитьДанныеСервер();
        Элементы.СписокПакетов.Обновить();
        Элементы.СписокФайлов.Обновить();
        
        НужноОбновлениеСписка = Ложь;
        
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ОформитьРазделОПроекте()
    
    Элементы.ДекорацияYPM.Заголовок           = "Yellow Package Manager";
    Элементы.ДекорацияДополнительно.Заголовок = "Пакетный менеджер для 1С, позволяющий получать внешние обработки и расширения из открытых репозиториев GitHub. "
        + "Их индекс формируется в рамках сбора информации для проекта OpenYellow";
    Элементы.ДекорацияТелеграм.Заголовок      = "@OpenYellowProject в Telegram";
    Элементы.ДекорацияГитхаб.Заголовок        = "Проект на GitHub";

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияОбновления(Результат, ДополнительныеПараметры) Экспорт
    
    Если ЗначениеЗаполнено(Результат) Тогда
        Сообщить(Результат);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗапросаПерезапуска(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "Перезапуск" Тогда
		
		ЗавершитьРаботуСистемы(, Истина);
		
	Иначе
		
		Закрыть();
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыполнениеФоновогоЗадания() Экспорт
    
    Завершено = Ложь;
    
    Если ПолучитьДатуСервера() > НачалоОбновления + 180 Тогда
        Завершено = Истина;
        Сообщить("Не удалось обновить индекс! Таймаут обновления");   
    КонецЕсли;
    
    Если ПроверитьВыполнениеФоновогоЗаданияСервер() Тогда
        
        СтруктураОбновления = ПолучитьИзВременногоХранилища(КлючХранилища);
        Завершено           = Истина;
		
		Попытка
        	ЗаписатьЛогНаСервере(СтруктураОбновления["Лог"]);  
			ОткрытьФормуОбновления(СтруктураОбновления);
		Исключение                   
			Сообщить("Не удалось обновить индекс! Возможно, для расширения установлен безопасный режим");
		КонецПопытки;
		        
    КонецЕсли;
    
    Если Завершено Тогда
        
        Элементы.ГруппаЛево.Видимость       = Истина;
        Элементы.ГруппаПраво.Видимость      = Истина;
        Элементы.ГруппаЗагрузка.Видимость   = Ложь;
        Элементы.ГруппаСтраницы.Доступность = Истина;
        
        ОтключитьОбработчикОжидания("ПроверитьВыполнениеФоновогоЗадания");
        
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаИмениРасширения(Результат, ДопПараметры) Экспорт
    
    Если Не ЗначениеЗаполнено(Результат) Тогда
        Возврат;
    КонецЕсли;
    
    Попытка
		
		ТДФ = Элементы.СписокФайлов.ТекущиеДанные;
        ТДР = Элементы.СписокПакетов.ТекущиеДанные;
		
        Если Не ТДФ = Неопределено Тогда 
            
            СтруктураЗаписи = Новый Структура;
            СтруктураЗаписи.Вставить("Репозиторий", ТДР.Репозиторий);
            СтруктураЗаписи.Вставить("Автор"      , ТДР.Автор);
            СтруктураЗаписи.Вставить("Файл"       , ТДФ.Файл);
            СтруктураЗаписи.Вставить("Версия"     , ТДФ.Версия);

            СообщениеОтметки = ОтметитьРасширениеНаСервере(СтруктураЗаписи, Результат);
            
            Элементы.СписокПакетов.Обновить();
            Элементы.СписокФайлов.Обновить();

		КонецЕсли;
        
    Исключение
        
        СообщениеОтметки = "Ошибка добавления расширения: " + ОписаниеОшибки();
        
    КонецПопытки;
    
    Сообщить(СообщениеОтметки);
    
КонецПроцедуры

#КонецОбласти
