#Если Не ВебКлиент Тогда

#Область СлужебныйПрограммныйИнтерфейс

Функция Get(Знач Адрес, Знач ПутьСохранения = "", Знач Заголовки = "") Экспорт
    
    Возврат ЗапросБезТела(Адрес, ПутьСохранения, Заголовки, "GET");
    
КонецФункции

Функция Put(Знач Адрес, Знач ПутьСохранения = "", Знач Заголовки = "") Экспорт
    
    Возврат ЗапросБезТела(Адрес, ПутьСохранения, Заголовки, "PUT");
    
КонецФункции

Функция Delete(Знач Адрес, Знач ПутьСохранения = "", Знач Заголовки = "") Экспорт
    
    Возврат ЗапросБезТела(Адрес, ПутьСохранения, Заголовки, "DELETE");
    
КонецФункции

Функция GetJSON(Знач Адрес, Знач Заголовки = "") Экспорт 
    
    Ответ = Get(Адрес, ,Заголовки);
    Ответ = JsonВСтруктуру(Ответ);
      
    Возврат Ответ;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РазбитьURL(Знач URL)

    URL = СтрЗаменить(URL, "https://", "");
    URL = СтрЗаменить(URL, "http://", "");
    URL = СтрЗаменить(URL, ":443", "");

    Адрес  = Прав(URL, СтрДлина(URL) - СтрНайти(URL, "/", НаправлениеПоиска.СНачала) + 1);
    Сервер = Лев(URL, СтрНайти(URL, "/", НаправлениеПоиска.СНачала) - 1);
    
    СтруктураВозврата = Новый Структура;
    СтруктураВозврата.Вставить("Сервер", Сервер);
    СтруктураВозврата.Вставить("Адрес" , Адрес);

    Возврат СтруктураВозврата;

КонецФункции

Функция СоздатьЗапрос(Знач Адрес)
              
    НовыйЗапрос = Новый HTTPЗапрос(Адрес);
    
    Возврат НовыйЗапрос;
    
КонецФункции

Функция СоздатьСоединение(Знач Сервер)
    
    Попытка 
        SSL = Новый ЗащищенноеСоединениеOpenSSL;
        Возврат Новый HTTPСоединение(Сервер, 443, , , , 3000, SSL);
    Исключение
        Возврат Новый HTTPСоединение(Сервер, 443, , , , 3000);
    КонецПопытки;
    
КонецФункции

Функция JsonВСтруктуру(Знач Текст)

    Если Не ЗначениеЗаполнено(Текст) Тогда
        Возврат "";
    КонецЕсли;
    
    Текст = ?(ТипЗнч(Текст) = Тип("ДвоичныеДанные"), ПолучитьСтрокуИзДвоичныхДанных(Текст), Текст);

    ЧтениеJSON = Новый ЧтениеJSON;   
    ЧтениеJSON.УстановитьСтроку(Текст);

    Данные = ПрочитатьJSON(ЧтениеJSON, Истина, Неопределено, ФорматДатыJSON.ISO);
    ЧтениеJSON.Закрыть();

    Возврат Данные;

КонецФункции

Функция ЗапросБезТела(Знач Адрес, Знач ПутьСохранения, Знач Заголовки, Знач Метод)
    
    СтруктураURL = РазбитьURL(Адрес);
    Сервер       = СтруктураURL["Сервер"];
    Адрес        = СтруктураURL["Адрес"];
    
    Запрос     = СоздатьЗапрос(Адрес);
    Соединение = СоздатьСоединение(Сервер);  
    
    Если ЗначениеЗаполнено(Заголовки) Тогда
        
        //@skip-check expression-not-collection
        Для Каждого Заголовок Из Заголовки Цикл
            
            Запрос.Заголовки.Вставить(Заголовок.Ключ, Заголовок.Значение);
            
        КонецЦикла;
        
    КонецЕсли;

	Если ЗначениеЗаполнено(ПутьСохранения) Тогда
    	Ответ = Соединение.ВызватьHTTPМетод(Метод, Запрос, ПутьСохранения);
	Иначе
		Ответ = Соединение.ВызватьHTTPМетод(Метод, Запрос);
	КонецЕсли;
    
    Если Ответ.КодСостояния = 302 Или Ответ.КодСостояния = 301 Тогда
        Возврат Get(Ответ.Заголовки["Location"], ПутьСохранения);
    КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПутьСохранения) Тогда
    	Ответ = Ответ.ПолучитьТелоКакДвоичныеДанные(); 
	Иначе 
		Ответ = Новый Файл(ПутьСохранения);
	КонецЕсли;
    
    Возврат Ответ;

КонецФункции

Функция JSONСтрокой(Знач Данные, Знач Экранирование = "Нет") Экспорт

    ПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Windows
        , " "
        , Истина
        , ЭкранированиеСимволовJSON[Экранирование]
        , Ложь
        , Ложь
        , Ложь
        , Ложь);

    Попытка
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку(ПараметрыJSON);
    
        ЗаписатьJSON(ЗаписьJSON, Данные);
        Возврат ЗаписьJSON.Закрыть();
    
    Исключение      
        Возврат "НЕ JSON: " + Строка(Данные);
    КонецПопытки;

КонецФункции

#КонецОбласти

#КонецЕсли
