#Область СлужебныйПрограммныйИнтерфейс

Процедура ОбновитьИндекс(Знач АдресаИндекса, Знач КлючХранилища) Экспорт
    
    ТекущаяВерсия   = ПолучитьВерсию();
    ЛогОбновления   = "";
    СтруктураВерсии = Новый Структура("Обновление, ТекущаяВерсия", Ложь, ТекущаяВерсия);
    
    ДобавитьСтрокуЛога("Начало обновления индекса...", ЛогОбновления);
       
    Для Каждого АдресИндекса Из АдресаИндекса Цикл
        
        ДобавитьСтрокуЛога("Получение индекса из " + АдресИндекса, ЛогОбновления);
        
        Попытка
            
            СтруктураИндекса = YPM_ИнструментыКлиентСервер.GetJSON(АдресИндекса);
            МассивИндекса    = СтруктураИндекса["chunks"];
            ВерсияИндекса    = СокрЛП(СтруктураИндекса["ypmVersion"]);
            
            Если ВерсияИндекса <> ТекущаяВерсия Тогда
                
                СтруктураВерсии.Вставить("Обновление", Истина);
                СтруктураВерсии.Вставить("НоваяВерсия", ВерсияИндекса);
                СтруктураВерсии.Вставить("Описание"   , СтруктураИндекса["updateDescription"]);
                СтруктураВерсии.Вставить("URLФайла"   , СтруктураИндекса["fileUrl"]);
                
            КонецЕсли;
            
             
            ДобавитьСтрокуЛога("Индекс получен! Число элементов: " + Строка(МассивИндекса.Количество()), ЛогОбновления);
            ДобавитьСтрокуЛога("Дата актуализации: " + Строка(СтруктураИндекса["updatedAt"]), ЛогОбновления);
            
        Исключение
            ДобавитьСтрокуЛога(ОписаниеОшибки(), ЛогОбновления);
            Возврат;
        КонецПопытки;
        
        Для Каждого Блок Из МассивИндекса Цикл
            
            Попытка
                ДобавитьСтрокуЛога("Получение данных из блока " + Блок, ЛогОбновления);
                ДанныеБлока = YPM_ИнструментыКлиентСервер.GetJSON(Блок);
                ЗаписатьДанныеБлока(ДанныеБлока);
            Исключение
                ДобавитьСтрокуЛога(ОписаниеОшибки(), ЛогОбновления);
                Продолжить;
            КонецПопытки;
        КонецЦикла;
    
    КонецЦикла;
    
    ДобавитьСтрокуЛога("Загрузка завершена!", ЛогОбновления);
    
    СтруктураВерсии.Вставить("Лог", ЛогОбновления);
    
    ПоместитьВоВременноеХранилище(СтруктураВерсии, КлючХранилища);
    
    ОбновитьСписокУстановленныхРасширений();
    
КонецПроцедуры

Процедура ОбновитьСписокУстановленныхРасширений() Экспорт
    
    ВсеРасширения         = РасширенияКонфигурации.Получить();
    МассивИдентификаторов = Новый Массив;
    
    Для Каждого ТекущееРасширение Из ВсеРасширения Цикл
        
        Если ТекущееРасширение.Имя = "Заглушка765" Тогда
            ТекущееРасширение.Удалить();
            Продолжить;
        КонецЕсли;
        
        МассивИдентификаторов.Добавить(Строка(ТекущееРасширение.УникальныйИдентификатор));        
    КонецЦикла;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   YPM_УстановленныеРешения.Репозиторий КАК Репозиторий,
        |   YPM_УстановленныеРешения.Автор КАК Автор,
        |   YPM_УстановленныеРешения.Файл КАК Файл,
        |   YPM_УстановленныеРешения.Версия КАК Версия,
        |   YPM_УстановленныеРешения.UUID КАК UUID
        |ИЗ
        |   РегистрСведений.YPM_УстановленныеРешения КАК YPM_УстановленныеРешения
        |ГДЕ
        |   YPM_УстановленныеРешения.UUID В (&UUID)";
    
    Запрос.УстановитьПараметр("UUID", МассивИдентификаторов);
    
    СуществующиеРасширения = Запрос.Выполнить().Выгрузить();
    
    НаборЗаписей = РегистрыСведений.YPM_УстановленныеРешения.СоздатьНаборЗаписей();
    
    НаборЗаписей.Загрузить(СуществующиеРасширения);
    НаборЗаписей.Записать(Истина);
    
КонецПроцедуры

Процедура ПроверитьПрименениеРасширения(Знач Данные, Знач Расширение) Экспорт
    
    ПроблемыУстановки = Расширение.ПроверитьВозможностьПрименения(Данные);
    
    Для Каждого Проблема Из ПроблемыУстановки Цикл
        
        Описание = Проблема["Описание"];
        
        Если Проблема.Важность = ВажностьПроблемыПримененияРасширенияКонфигурации.Критичная Тогда
            ВызватьИсключение Описание;
        Иначе
            
            Обычная = Проблема.Важность = ВажностьПроблемыПримененияРасширенияКонфигурации.Обычная;
            Сообщить(Описание, ?(Обычная, СтатусСообщения.Внимание, СтатусСообщения.Информация));
            
        КонецЕсли;
        
    КонецЦикла;
    
КонецПроцедуры

Функция ПоставитьУстановитьЗвезду(Знач ПолноеИмя, Знач Токен) Экспорт
    
    Заголовки = Новый Соответствие;
    Заголовки.Вставить("Authorization", "Bearer " + Токен);
    
    Ответ  = YPM_ИнструментыКлиентСервер.GetJSON("https://api.github.com/user/starred/" + ПолноеИмя, Заголовки);
    Статус = Ответ["status"];
    
    Если Статус = "204" Тогда
        Ответ = YPM_ИнструментыКлиентСервер.Delete("https://api.github.com/user/starred/" + ПолноеИмя, ,Заголовки);
        Возврат "Добавлено в избранное!";
    ИначеЕсли Статус = "404" Тогда
        Ответ = YPM_ИнструментыКлиентСервер.Put("https://api.github.com/user/starred/" + ПолноеИмя, ,Заголовки);
        Возврат "Удалено из избранного!";
        
    Иначе
        
        Возврат "Ошибка: " + YPM_ИнструментыКлиентСервер.JSONСтрокой(Ответ);
        
    КонецЕсли;
    
КонецФункции

Функция НайтиРасширениеПоUUID(Знач UUID) Экспорт
	
	Если ТипЗнч(UUID) <> Тип("УникальныйИдентификатор") Тогда
		UUID = Новый УникальныйИдентификатор(UUID);
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("УникальныйИдентификатор", UUID);
	Найденные       = РасширенияКонфигурации.Получить(СтруктураОтбора);
	
	Если Найденные.Количество() = 0 Тогда
		НовоеРасширение = РасширенияКонфигурации.Создать();
	Иначе	
		НовоеРасширение = Найденные[0];
    КонецЕсли; 
    
    Возврат НовоеРасширение;
	
КонецФункции

Функция ПолучитьВерсию() Экспорт
    Возврат  РасширенияКонфигурации.Получить(Новый Структура("Имя", "YPM"))[0].Версия;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаписатьДанныеБлока(Знач ДанныеБлока) 
    
    Для Каждого Репозиторий Из ДанныеБлока Цикл
       
        Название = Репозиторий["name"];
        Автор    = Репозиторий["authorName"];
        Версии   = Репозиторий["versions"];
        
        НЗ = РегистрыСведений.YPM_ИндексПакетов.СоздатьНаборЗаписей();
        НЗ.Отбор.Репозиторий.Установить(Название);
        НЗ.Отбор.Автор.Установить(Автор);
        
        НЗ.Прочитать();
        НЗ.Очистить();
        
        СтруктураЗаписи = Новый Структура;
        СтруктураЗаписи.Вставить("Репозиторий"        , Название);
        СтруктураЗаписи.Вставить("Автор"              , Автор);
        СтруктураЗаписи.Вставить("Описание"           , Репозиторий["description"]);
        СтруктураЗаписи.Вставить("СтраницаАвтора"     , Репозиторий["authorURL"]);
        СтруктураЗаписи.Вставить("СтраницаРепозитория", Репозиторий["URL"]);
        СтруктураЗаписи.Вставить("Лицензия"           , Репозиторий["license"]);
        СтруктураЗаписи.Вставить("Звезд"              , Репозиторий["stars"]);
        СтруктураЗаписи.Вставить("Идентификатор"      , Репозиторий["id"]);
        
        Для Каждого Версия Из Версии Цикл
            
            Файлы = Версия["files"];
            СтруктураЗаписи.Вставить("Версия", Версия["version"]);
            
            Для Каждого Файл Из Файлы Цикл
                
                СтруктураЗаписи.Вставить("Файл"      , Файл["file"]);
                СтруктураЗаписи.Вставить("АдресФайла", Файл["fileURL"]);
                СтруктураЗаписи.Вставить("Размер"    , Файл["size"]);
                СтруктураЗаписи.Вставить("Скачиваний", Файл["downloads"]);
                СтруктураЗаписи.Вставить("Тип"       , Файл["type"]);
                
                Попытка
                    СтруктураЗаписи.Вставить("Дата", XMLЗначение(Тип("Дата"), Файл["date"]));
                Исключение
                    СтруктураЗаписи.Вставить("Дата", Дата(1, 1, 1));
                КонецПопытки;
                
                ЗаполнитьЗначенияСвойств(НЗ.Добавить(), СтруктураЗаписи);
                         
            КонецЦикла;
            
        КонецЦикла;
        
        НЗ.Записать(Истина);
         
    КонецЦикла;
    
КонецПроцедуры

Процедура ДобавитьСтрокуЛога(Знач Текст, ЛогОбновления)
   ЛогОбновления = ЛогОбновления + Текст + Символы.ПС; 
КонецПроцедуры

#КонецОбласти